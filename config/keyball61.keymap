#define DEFAULT 0
#define SYM     1
#define FUN     2
#define MOUSE   3
#define SCROLL  4
#define SNIPE   5

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        mouse_left {
            bindings = <&mkp LCLK>;
            key-positions = <31 32>;
        };

        mouse_right {
            bindings = <&mkp RCLK>;
            key-positions = <32 33>;
        };

        mouse_middle {
            bindings = <&mkp MCLK>;
            key-positions = <31 33>;
        };

        mouse_priv {
            bindings = <&mkp MB4>;
            key-positions = <45 46>;
        };

        mouse_next {
            bindings = <&mkp MB5>;
            key-positions = <46 47>;
        };

        mouse_scroll {
            bindings = <&mo 5>;
            key-positions = <45 47>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp ESC           &kp N1     &kp N2        &kp N3        &kp N4  &kp N5                               &kp N6  &kp N7  &kp N8     &kp N9   &kp N0         &kp BSPC
&kp TAB           &kp Q      &kp W         &kp E         &kp R   &kp T                                &kp Y   &kp U   &kp I      &kp O    &kp P          &kp BACKSLASH
&kp LEFT_CONTROL  &kp A      &kp S         &kp D         &kp F   &kp G                                &kp H   &kp J   &kp K      &kp L    &kp SEMI       &kp RETURN
&kp LEFT_SHIFT    &kp Z      &kp X         &kp C         &kp V   &kp B   &kp GRAVE  &kp SINGLE_QUOTE  &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH       &kp RIGHT_SHIFT
&mo 2             &kp LCTRL  &kp LEFT_ALT  &kp LEFT_WIN  &mo 5   &mo 4   &kp SPACE  &kp SPACE         &mo 3                               &kp RIGHT_ALT  &kp DELETE
            >;
        };

        number_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans  &trans
            >;

            label = "NUM";
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&trans  &trans      &trans        &trans        &trans        &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans        &trans        &trans        &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans        &trans        &trans        &trans  &trans  &trans  &trans                          &trans  &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                  &kp F6   &kp F7          &kp F8          &kp F9           &kp F10           &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &kp F11  &kp F12         &kp UP_ARROW    &trans           &kp MINUS         &kp EQUAL
&trans  &trans  &trans  &trans  &trans  &trans                  &trans   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans          &trans          &trans           &trans            &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                                                    &trans            &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                                   &trans  &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans  &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans  &trans
            >;
        };
    };
};
